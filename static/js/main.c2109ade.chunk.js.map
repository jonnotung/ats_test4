{"version":3,"sources":["utilities/countryUtils.js","actions/index.js","components/FileInputComponent.js","components/CountrySelect.js","components/CountryDist.js","components/CountryGender.js","components/CarMake.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["countryUtils","data","entries","cleanedEntries","index","Id","push","countries","currCountry","Country","countryNames","country","includes","currentCountry","name","count","dist","thisCount","dataArray","arrayCopy","Object","toConsumableArray","sort","a","b","slice","length","selection","gender","totalPeople","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","Gender","err","return","cars","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","currCar","toArray","actionCreators","file","type","payload","removeEmptyEntries","countriesObj","isolateCountries","getCountryNames","fileInput","isolateCarMake","getDistribution","countGender","connect","getFile","countCountries","countryDist","getCountryDist","countryGender","genderBreakdown","countCarMakes","props","fileReader","handleFileRead","event","content","result","parsedFile","Papaparse","parse","header","react_default","createElement","className","htmlFor","id","accept","onChange","target","files","FileReader","onloadend","readAsText","state","selectedCountry","selectCountry","react","e","handleChange","map","key","CountryDist","this","getCountCountries","getDist","victory_chart","height","domainPadding","theme","VictoryTheme","material","victory_axis","label","style","axisLabel","padding","dependentAxis","victory_bar","horizontal","x","y","Component","toFixed","CarMake","carMake","width","carMakes","components_FileInputComponent","components_CountryDist","components_CountrySelect","components_CountryGender","components_CarMake","Boolean","window","location","hostname","match","combineReducers","arguments","action","ReactDOM","render","es","store","createStore","reducers","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2109ade.chunk.js","sourcesContent":["const countryUtils = {};\r\n\r\ncountryUtils.removeEmptyEntries = (data) => {\r\n    const entries = data.data;\r\n\r\n    const cleanedEntries = [];\r\n    for (const index in entries) {\r\n        \r\n        if(entries[index].Id) {\r\n            cleanedEntries.push(entries[index]);\r\n        }\r\n    }\r\n    return cleanedEntries;\r\n}\r\n\r\n\r\n//expects output of parser - object with key Country\r\n//returns an object with keys = country names, values = # of people\r\ncountryUtils.isolateCountries = (data) => {\r\n    \r\n    const countries = {};\r\n\r\n    for(const index in data) {\r\n        let currCountry = data[index].Country;\r\n\r\n        if (! (currCountry in countries)) {\r\n            countries[currCountry] = 1;\r\n        } else {\r\n            countries[currCountry] = countries[currCountry] + 1;\r\n        }\r\n    }\r\n    return countries;\r\n};\r\n\r\ncountryUtils.getCountryNames = (data) => {\r\n    const countryNames = [];\r\n\r\n    for(let country in data) {\r\n        if (country !== \"undefined\" && !countryNames.includes(country)) {\r\n            countryNames.push(country);\r\n        }\r\n    }\r\n    return countryNames;\r\n}\r\n\r\n//expects an object with keys = country names, values = # of people\r\n//returns an array of objects of form country name: # of people\r\ncountryUtils.toArray = (data) => {\r\n    const countries = [];\r\n\r\n    for (let country in data) {\r\n        \r\n        const currentCountry = {\r\n            name: country,\r\n            count: data[country]\r\n        }\r\n        countries.push(currentCountry);\r\n        \r\n    }\r\n    return countries;\r\n}\r\n\r\n//expects an object with keys = country names, values = count of people from file\r\ncountryUtils.getDistribution = (data) => {\r\n    const dist = {};\r\n\r\n    for(let country in data) {\r\n        const thisCount = data[country];\r\n        if(! (thisCount in dist)) {\r\n            dist[thisCount] = 1;\r\n        } else {\r\n            dist[thisCount] = dist[thisCount] + 1;\r\n        }\r\n    }\r\n    \r\n    return dist;\r\n}\r\n\r\n//expects an array of objects with keys name and count\r\ncountryUtils.getTen = (dataArray) => {\r\n    const arrayCopy = [...dataArray].sort( (a, b) => {\r\n        return b.count - a.count;\r\n    } );\r\n    return [arrayCopy.slice(0, 10), arrayCopy.slice(arrayCopy.length - 10, arrayCopy.length)];\r\n}\r\n\r\ncountryUtils.countGender = (data, selection) => {\r\n    const countries = [\r\n        {gender: \"Female\", count: 0},\r\n        {gender: \"Male\", count: 0}\r\n    ];\r\n\r\n    let totalPeople = 0;\r\n\r\n    for(const row of data) {\r\n        if (row.Id && (selection === \"all countries\" || row.Country === selection)) {\r\n            totalPeople++;\r\n            if(row.Gender === \"Female\") {\r\n                countries[0].count = countries[0].count + 1;\r\n            } else {\r\n                countries[1].count = countries[1].count + 1;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    countries[0].count = countries[0].count / totalPeople;\r\n    countries[1].count = countries[1].count / totalPeople;\r\n    countries.push(totalPeople);\r\n\r\n    return countries;\r\n}\r\n\r\ncountryUtils.isolateCarMake = (data, selection) => {\r\n    const cars= {};\r\n\r\n    for (const row of data) {\r\n        if(row.Id && (selection === \"all countries\" || row.Country === selection)) {\r\n            let currCar = row[\"Car Make\"];\r\n            \r\n            if (!(currCar in cars)) {\r\n                cars[currCar] = 1;\r\n            } else {\r\n                cars[currCar] = cars[currCar] + 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const carArr = countryUtils.toArray(cars).sort((a, b) => {\r\n        return b.count - a.count;\r\n    });\r\n\r\n    return carArr.slice(0, 10);\r\n}\r\n\r\nexport default countryUtils;","import countryUtils from '../utilities/countryUtils';\r\n\r\nconst actionCreators = {};\r\n\r\nactionCreators.getFile = (file) => {\r\n\r\n    const cleanedFile = countryUtils.removeEmptyEntries(file);\r\n\r\n    return ({\r\n        type: \"LOAD_FILE\",\r\n        payload: cleanedFile,\r\n    });\r\n}\r\n\r\nactionCreators.getCountryNames = (data) => {\r\n    const countriesObj = countryUtils.isolateCountries(data);\r\n    const nameArr = countryUtils.getCountryNames(countriesObj);\r\n\r\n    return({\r\n        type: \"COUNTRY_NAMES\",\r\n        payload: nameArr\r\n    });\r\n}\r\n\r\nactionCreators.selectCountry = (data) => {\r\n\r\n    return({\r\n        type: \"SELECT_COUNTRY\",\r\n        payload: data\r\n    });\r\n}\r\n\r\nactionCreators.countCountries = (data) => {\r\n    const countriesObj = countryUtils.isolateCountries(data);\r\n    const countriesArr = countryUtils.toArray(countriesObj);\r\n\r\n    return ({\r\n        type: \"COUNT_COUNTRIES\",\r\n        payload: countriesArr\r\n    });\r\n}\r\n\r\nactionCreators.countCarMakes = (data, selection) => {\r\n    let fileInput = data;\r\n    if(data.data) {\r\n        fileInput = data.data;\r\n    }\r\n    const carsArr = countryUtils.isolateCarMake(fileInput, selection);\r\n\r\n    return ({\r\n        type: \"CAR_MAKES\",\r\n        payload: carsArr\r\n    });\r\n}\r\n\r\nactionCreators.getCountryDist = (data) => {\r\n    const countriesObj = countryUtils.isolateCountries(data); \r\n    const dist = countryUtils.getDistribution(countriesObj);\r\n    const distArr = countryUtils.toArray(dist);\r\n\r\n    return ({\r\n        type: \"COUNTRY_DIST\",\r\n        payload: distArr\r\n    });\r\n}\r\n\r\nactionCreators.genderBreakdown = (data, selection) => {\r\n    let fileInput = data;\r\n    if(data.data) {\r\n        fileInput = data.data;\r\n    }\r\n    const gender = countryUtils.countGender(fileInput, selection);\r\n\r\n    return ({\r\n        type: \"GENDER\",\r\n        payload: gender\r\n    });\r\n}\r\n\r\nexport default actionCreators;","import React from 'react';\r\nimport Papaparse from 'papaparse';\r\nimport {connect} from 'react-redux';\r\n\r\nimport actionCreators from '../actions/';\r\n\r\nconst FileInputComponent = (props) => {\r\n    let fileReader;\r\n\r\n    const handleFileRead = (event) => {\r\n        const content = fileReader.result;\r\n        const parsedFile = Papaparse.parse(content, {header: true});\r\n\r\n        props.getFile(parsedFile);\r\n        props.countryGender(parsedFile, \"all countries\");\r\n    }\r\n\r\n    const handleFileChosen = (file) => {\r\n        fileReader = new FileReader();\r\n        fileReader.onloadend = handleFileRead;\r\n        fileReader.readAsText(file);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"fileInputWrap\">\r\n            <label htmlFor=\"file\" className=\"loadLabel\">Load .csv file</label>\r\n            <input \r\n                type=\"file\"\r\n                id=\"file\"\r\n                className=\"fileInput visuallyHidden\"\r\n                accept=\".csv\"\r\n                onChange={ (event) => handleFileChosen(event.target.files[0]) }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n//FileInputComponent doesn't display anything from state\r\nexport default connect(null, {\r\n    getFile: actionCreators.getFile,\r\n    countCountries: actionCreators.countCountries,\r\n    countryNames: actionCreators.getCountryNames,\r\n    countryDist: actionCreators.getCountryDist,\r\n    countryGender: actionCreators.genderBreakdown,\r\n    countCarMakes: actionCreators.countCarMakes,\r\n})(FileInputComponent);","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport actionCreators from '../actions/';\r\n\r\nconst CountrySelect = (props) => {\r\n\r\n    //wrapper function to dispatch actions to update selection, gender breakdown and car makes on selection change\r\n    const handleChange = (e) => {\r\n        props.selectCountry(e);\r\n        props.genderBreakdown(props.file, e);\r\n        props.countCarMakes(props.file, e);\r\n    }\r\n\r\n    return (\r\n        props.file ? \r\n        <Fragment>\r\n            <select onChange={ e => handleChange(e.target.value) }>\r\n                <option value=\"all countries\">All countries</option>\r\n                {\r\n                    props.countryNames.map((name, id) => {\r\n                        return(\r\n                            <option key={id} value={name}>{name}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n        </Fragment> : \"\"\r\n    );\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return({\r\n        countryNames: state.countryNames,\r\n        file: state.file,\r\n        selectedCountry: state.selectCountry,\r\n    });\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    selectCountry: actionCreators.selectCountry,\r\n    genderBreakdown: actionCreators.genderBreakdown,\r\n    countCarMakes: actionCreators.countCarMakes, \r\n\r\n})(CountrySelect);","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\r\n\r\nimport actionCreators from '../actions';\r\n\r\nclass CountryDist extends Component  {\r\n \r\n    componentDidMount() {\r\n        this.props.getCountCountries(this.props.file);\r\n        this.props.getCountryNames(this.props.file);\r\n        this.props.getDist(this.props.file);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            \r\n                <div className=\"distribution\">\r\n                    <h2>Distribution of people from all countries present</h2>\r\n                    <h3>Total people in file: {this.props.file.length}</h3>\r\n                    <h3>Number of countries: {this.props.countryNames.length}</h3>\r\n                    <VictoryChart \r\n                        \r\n                        height={500}\r\n                        domainPadding={15}\r\n                        theme={VictoryTheme.material}\r\n                    >\r\n                        <VictoryAxis\r\n                            label=\"Number of people\"\r\n                            style={{ axisLabel: { padding: 30 } }}\r\n                        />\r\n                        <VictoryAxis\r\n                            dependentAxis\r\n                            label=\"Number of countries\"\r\n                            style={{ axisLabel: { padding: 30 } }}\r\n                        />\r\n                        <VictoryBar\r\n                            horizontal\r\n                            data={this.props.countryDist}\r\n                            //data accessor for x values\r\n                            x=\"name\"\r\n                            //data accessor for y values\r\n                            y=\"count\"\r\n                        />\r\n                    </VictoryChart>\r\n                </div> \r\n                \r\n            \r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return({\r\n        countryDist: state.countryDist,\r\n        countryNames: state.countryNames,\r\n        file: state.file\r\n    });\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getDist: actionCreators.getCountryDist,\r\n    getCountryNames: actionCreators.getCountryNames,\r\n    getCountCountries: actionCreators.countCountries,\r\n})(CountryDist);","import React, {Fragment, Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport actionCreators from '../actions';\r\n\r\nconst CountryGender = (props) => {\r\n\r\n    \r\n        return(\r\n             <Fragment>\r\n               { props.countryGender[0] || props.countryGender[1] ? \r\n                    <Fragment>  \r\n                        <h2>People from {props.selectedCountry} in dataset: </h2>\r\n                        <h3 className=\"totalPeople\">Total people: {props.countryGender[2]}</h3>\r\n                        <div className=\"genderRow\">\r\n                            <h3>{props.countryGender[0].gender} :</h3>\r\n                            <h3>{ (props.countryGender[0].count * 100).toFixed(2) } %</h3>\r\n                        </div>\r\n                        <div className=\"genderRow\">\r\n                            <h3>{props.countryGender[1].gender} :</h3>\r\n                            <h3>{ (props.countryGender[1].count * 100).toFixed(2) } %</h3>\r\n                        </div>\r\n                    </Fragment>\r\n                     : \"\" } \r\n            </Fragment >\r\n            \r\n        );\r\n    }\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return({\r\n        countryGender: state.countryGender,\r\n        selectedCountry: state.selectCountry\r\n    }); \r\n}\r\n\r\nexport default connect(mapStateToProps)(CountryGender);","import React, { Fragment, Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\r\n\r\nimport actionCreators from '../actions';\r\n\r\nclass CarMake extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.countCarMakes(this.props.file, this.props.selectedCountry);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            !(this.props.carMake.length === 0) ?\r\n                <Fragment>\r\n                    <h2>Top 10 car brands for {this.props.selectedCountry}</h2>\r\n                    <VictoryChart \r\n                        width={950} \r\n                        // domainPadding={45}\r\n                        theme={VictoryTheme.material}\r\n                        domainPadding={60}\r\n                    >\r\n                        <VictoryAxis\r\n                            label=\"\"\r\n                            style={{ axisLabel: { padding: 30 } }}\r\n                        />\r\n                        <VictoryAxis\r\n                            dependentAxis\r\n                            label=\"Number of owners\"\r\n                            style={{ axisLabel: { padding: 30 } }}\r\n                        />\r\n                        <VictoryBar\r\n                            \r\n                            padding={ 60}\r\n                            data={this.props.carMake}\r\n                            //data accessor for x values\r\n                            x=\"name\"\r\n                            //data accessor for y values\r\n                            y=\"count\"\r\n                        />\r\n                    </VictoryChart>\r\n                </Fragment> : \"\"\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    \r\n    return ({\r\n        carMake: state.carMakes,\r\n        selectedCountry: state.selectCountry,\r\n        file: state.file\r\n    });\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    countCarMakes: actionCreators.countCarMakes,\r\n})(CarMake);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport FileInputComponent from './components/FileInputComponent';\r\nimport CountrySelect from './components/CountrySelect';\r\nimport CountryDist from './components/CountryDist';\r\nimport CountryGender from './components/CountryGender';\r\nimport CarMake from './components/CarMake';\r\nimport './App.css';\r\n\r\nconst App = (props) => {\r\n  \r\n \r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <div className=\"outerWrapper\">\r\n            <div className=\"innerWrapper\">\r\n              <h1>Upload a comma separated .csv file from the csv folder</h1>\r\n              <FileInputComponent />\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        { props.file.length > 0 ?\r\n        <section className=\"distOuter\">\r\n          <div className=\"outerWrapper\">\r\n            <div className=\"innerWrapper\">\r\n              <CountryDist />\r\n            </div>\r\n          </div>\r\n        </section> : \"\"\r\n        }\r\n        \r\n        <section className=\"breakdownOuter\">\r\n          <div className=\"outerWrapper\">\r\n            <div className=\"innerWrapper\">\r\n              {props.file.length > 0 ?\r\n                <div className=\"breakdown\">\r\n                  <CountrySelect />\r\n\r\n                  <CountryGender />\r\n\r\n                  <CarMake />\r\n                  \r\n                </div> \r\n                : \"\" \r\n              } \r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return({\r\n      countryDist: state.countryDist,\r\n      file: state.file\r\n  });\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nconst file = (file=[], action) => {\r\n    if (action.type === \"LOAD_FILE\") {\r\n        return action.payload;\r\n    }\r\n    return file;\r\n}\r\n\r\nconst countCountries = (data=[], action) => {\r\n    if (action.type === \"COUNT_COUNTRIES\") {\r\n        return action.payload;\r\n    }\r\n    return data;\r\n}\r\n\r\nconst getCountryNames = (data=[], action) => {\r\n    if(action.type === \"COUNTRY_NAMES\") {\r\n        return action.payload;\r\n    }\r\n    return data;\r\n}\r\n\r\nconst selectCountry = (data=\"all countries\", action) => {\r\n    if(action.type===\"SELECT_COUNTRY\") {\r\n        return action.payload;\r\n    }\r\n    return data;\r\n}\r\n\r\nconst countryDist = (data=[], action) => {\r\n    if (action.type === \"COUNTRY_DIST\") {\r\n        return action.payload;\r\n    }\r\n    return data;\r\n}\r\n\r\nconst countryGender = (data=[], action) => {\r\n    if (action.type === \"GENDER\") {\r\n        return action.payload;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nconst carMakes = (data=[], action) => {\r\n    if(action.type === \"CAR_MAKES\") {\r\n        return action.payload;\r\n    }\r\n    return data;\r\n}\r\n\r\nexport default combineReducers({\r\n    file: file,\r\n    countCountries: countCountries,\r\n    countryNames: getCountryNames,\r\n    selectCountry: selectCountry,\r\n    countryDist: countryDist,\r\n    countryGender: countryGender,\r\n    carMakes: carMakes,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore} from 'redux';\r\n\r\nimport reducers from './reducers';\r\n\r\nReactDOM.render(\r\n    <Provider store={createStore(reducers)}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}